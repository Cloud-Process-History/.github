name: Deploy

on:
  workflow_dispatch:
    inputs:
      accountNumber:
        description: 'AWS Account where you want to deploy'
        required: true
        default: 196336773538
      env:
        description: 'Environment dev or pro'
        required: true
        default: dev
        options: ['dev', 'pro']
      artifact_version:
        description: 'Package version'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ARTIFACT_NAME: platform-billing-service-state-change-tracker
      ARTIFACTORY_GENERIC_REPOSITORY: knolar-generic
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
      
      - uses: Cloud-Process-History/github-action-assume-role@1.0.0
        with:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'eu-west-1'
          AWS_EXTERNAL_ID: ${{ secrets.DEPLOYMENT_EXID }}
          AWS_ROLE_TO_ASSUME: arn:aws:iam::${{ github.event.inputs.accountNumber }}:role/github-robot-access-role
          AWS_SESSION_NAME: 'github-robot'

      - name: Download Package
        run: |
          curl -L -u ${{ secrets.ARTIFACTORY_USER }}:${{ secrets.ARTIFACTORY_PWD }} \
               -X GET "https://cepsa.jfrog.io/artifactory/${{ env.ARTIFACTORY_GENERIC_REPOSITORY }}/${{ env.ARTIFACT_NAME }}/${{ env.ARTIFACT_NAME }}-${{ github.event.inputs.artifact_version }}.zip" \
               --output ${{ env.ARTIFACT_NAME }}-${{ github.event.inputs.artifact_version }}.zip
          mkdir dist
          unzip ${{ env.ARTIFACT_NAME }}-${{ github.event.inputs.artifact_version }}.zip -d dist

      - name: Get Parameters
        run: |
          
          STACK_TAGS='[{"Key":"type", "Value":"billing"}, {"Key":"area", "Value":"baseline"}]'
          echo "STACK_TAGS=${STACK_TAGS}" >> $GITHUB_ENV

          TABLE_ARN="$(aws cloudformation describe-stacks \
                      --stack-name=platform-billing-service-state-tracking \
                      --query='Stacks[0].Outputs[?OutputKey==`DynamoTableArn`].OutputValue' \
                      --output text)"
          echo "TABLE_ARN=${TABLE_ARN}" >> $GITHUB_ENV

          TABLE_NAME="$(aws cloudformation describe-stacks \
                      --stack-name=platform-billing-service-state-tracking \
                      --query='Stacks[0].Outputs[?OutputKey==`DynamoTableName`].OutputValue' \
                      --output text)"
          echo "TABLE_NAME=${TABLE_NAME}" >> $GITHUB_ENV

          LAMBDA_FUNCTION_NAME=platform-billing-service-state-change-tracker
          echo "LAMBDA_FUNCTION_NAME=${LAMBDA_FUNCTION_NAME}" >> $GITHUB_ENV

          MEMORY_CONFIG=128
          echo "MEMORY_CONFIG=${MEMORY_CONFIG}" >> $GITHUB_ENV

          TIMEOUT_CONFIG=60
          echo "TIMEOUT_CONFIG=${TIMEOUT_CONFIG}" >> $GITHUB_ENV

          export SUBNETS="$(aws cloudformation list-exports | jq .Exports | jq -r -c '.[] | select(.Name | test("PrivateSubnet.{1}AID"))'.Value | sed -e 's/^/pSubnets=/' | paste -sd "," -)"
          echo "pSubnets=${SUBNETS}" >> $GITHUB_ENV
          

          ECS_LOGS_ALLOWED_STATUS='RUNNING,STOPPED'
          echo "ECS_LOGS_ALLOWED_STATUS=${ECS_LOGS_ALLOWED_STATUS}" >> $GITHUB_ENV

          EMR_LOGS_ALLOWED_STATUS='RUNNING,STOPPED'
          echo "EMR_LOGS_ALLOWED_STATUS=${EMR_LOGS_ALLOWED_STATUS}" >> $GITHUB_ENV
          

      - name: Create Cloudformation Package
        run: |
          aws cloudformation package --template-file ${GITHUB_WORKSPACE}/iac/template.yaml \
                        --output-template-file ${GITHUB_WORKSPACE}/iac/packaged-template.yaml \
                        --s3-bucket ${{env.LAMBDA_BUCKET_NAME}} \
                        --s3-prefix ${{env.LAMBDA_FUNCTION_NAME}} \

      - name: Deploy CloudFormation Stack
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.4
        with:
          name: ${{env.LAMBDA_FUNCTION_NAME}}
          tags: ${{env.STACK_TAGS}}
          template: iac/packaged-template.yaml
          no-fail-on-empty-changeset: 1
          capabilities: CAPABILITY_AUTO_EXPAND,CAPABILITY_NAMED_IAM,CAPABILITY_IAM
          parameter-overrides: >-
            pLambdaFunctionName=${{env.LAMBDA_FUNCTION_NAME}},
            ${{ env.pSubnets }},
            pTableName=${{env.TABLE_NAME}},
            pTableArn=${{env.TABLE_ARN}},
            pMemorySize=${{env.MEMORY_CONFIG}},
            pTimeout=${{env.TIMEOUT_CONFIG}}
